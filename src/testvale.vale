
struct TestHelper {
  frontendPath str;
}

func testPage(frontendPath str, page &Page) {
  // println("zork");
  th = TestHelper(frontendPath);
  members &List<PageMember> = page.members;
  foreach m in members { testPageMember(&th, &m); }
}

abstract func testPageMember(th &TestHelper, virtual this &PageMember);
func testPageMember(th &TestHelper, this &Slice) { 
  // println("zork");
}
func testPageMember(th &TestHelper, this &Section) {
  // println("zork");
  testSection(th, this);
}
func testSection(th &TestHelper, this &Section) {
  // println("zork");
  foreach x in this.members { testSectionMember(th, x); }
}

abstract func testSectionMember(th &TestHelper, virtual this &SectionMember);
func testSectionMember(th &TestHelper, this &Header) { 
  // println("zork");
}
func testSectionMember(th &TestHelper, this &PolyList) { 
  // println("zork");
}
func testSectionMember(th &TestHelper, this &Paragraph) { 
  // println("zork");
}
func testSectionMember(th &TestHelper, this &Split) {
  // println("zork");
  foreach columnSections in this.columns {
  // println("gork");
    th2 = th;
    foreach s in columnSections { testSection(th2, s); }
  }
}
func testSectionMember(th &TestHelper, this &Quote) { 
  // println("gork");
}
func testSectionMember(th &TestHelper, this &Callout) { 
  // println("gork");
}
func testSectionMember(th &TestHelper, this &CodeSnippet) {
  // println("gork");
  testCode(th, this);
}

func getCodeForLanguage(codeSnippet &CodeSnippet, language StrSlice) StrSlice {
  // println("gork");
  code = "".slice();
  foreach item in codeSnippet.items {
    if (item.language == language) {
      set code = slice(code + item.code);
    }
  }
  return code;
}

func removeNotes(s StrSlice) str {
  iter = ParseIter(s);
  result = "";
  while (iter.hasNext()) {
    if (iter.skipIfNext("«")) {
      // Parser should have replaced the name with an id, like «mynote» to «13».
      iter.getUntilExpected("»");
    } else {
      set result = result + iter.getNext();
    }
  }
  return result;
}

func testCode(th &TestHelper, snippet &CodeSnippet) {
  // println("ork");
  if (snippet.args.len() > 0 and snippet.args.get(0) == "notest") {
    return void();
  }

  // println("in testcode!");

  vale = getCodeForLanguage(snippet, "vale".slice()).removeNotes();
  c = getCodeForLanguage(snippet, "c".slice()).removeNotes();
  stdin = getCodeForLanguage(snippet, "stdin".slice()).removeNotes();
  expectedStdout = getCodeForLanguage(snippet, "stdout".slice()).removeNotes();
  
  println("Program:");
  println(vale);

  if (vale == "") {
    println("Skipping snippet, contains no Vale.");
    return void();
  } else {
    println("Testing!");
  }

  // println("bork!");

  extraArgs = "";
  foreach arg in snippet.args {
    // println("arg: " + arg);
    if (arg.startsWith("`")) {
      set vale = vale + "\n" + arg.slice(1, arg.len() - 1) + "\n";
    } else {
      set extraArgs = " " + th.frontendPath + "/" + arg;
    }
  }

  // println("Running code:");
  // println(vale);

  // println("Making directory!");
  "/tmp/vale".Path()&.CreateDir(true);
  // println("Made directory!");
  "/tmp/vale/test.vale".Path()&.writeString(vale);
  "/tmp/vale/test.c".Path()&.writeString(c);
  // println("Made files!");

  buildCommand = "{th.frontendPath}/valec build mvtest=/tmp/vale/test.vale mvtest=/tmp/vale/test.c --output_dir /tmp/valebuild -o test {extraArgs}".trim().str();
  println("Running: " + buildCommand);

  // println("Building: {buildCommand}");
  buildResult = ((Subprocess(buildCommand)).expect()).capture_and_join();
  if (buildResult.return_code != 0) {
    println("Couldn't build! Test:");
    println(vale);
    println("Stdout:");
    println(buildResult.stdout);
    if (buildResult.stderr.len() > 0) {
      println(buildResult.stderr);
    }
    panic("Couldn't build test!");
  }

  // println("Writing stdin and stdout. stdin:");
  // println(stdin.str());
  // writeStringToFile("/tmp/vale/teststdin", stdin.str());
  // writeStringToFile("/tmp/vale/teststdout", stdout.str());

  // println("Running test code!");

  // println("Running: /tmp/vale/test");
  process = (Subprocess("/tmp/valebuild/test", &snippet.args)).expect();
  if (stdin.trim().len() > 0) {
    println("Giving stdin:");
    println(stdin);
    process.handle.write_stdin(stdin);
  }
  runResult = (process).capture_and_join();
  //runResult =
  //    executeProgramV2(
  //        ExecuteProgramArgs(
  //            "/tmp/vale/test",
  //            MakeImmArray(
  //                snippet.args.len(),
  //                &!(i){ snippet.args.get(i).str() }),
  //            // MakeImmArray(
  //            //     snippet.args.len(),
  //            //     (i){ snippet.args.get(i) }),
  //            stdin));
  // println("Stdout: " + runResult.stdout);

  if (expectedStdout.trim().len() > 0) {
    if (runResult.stdout.trim() != expectedStdout.trim()) {
      println("Program did not have expected output!");
      println("Expected:");
      println(expectedStdout.trim());
      println("Actual:");
      println(runResult.stdout.trim());
      panic("Failed!");
    }
  }

  println("Success!");
}
