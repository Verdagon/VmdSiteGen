
struct TestHelper {
  valestromPath str;
  stdlibPath str;
}

fn testPage(valestromPath str, stdlibPath str, page &Page) {
  // println("zork");
  th = TestHelper(valestromPath, stdlibPath);
  page.members.each({ testPageMember(&th, _); });
}

fn testPageMember(th &TestHelper, virtual this &PageMember) abstract;
fn testPageMember(th &TestHelper, this &Slice impl PageMember) { 
  // println("zork");
}
fn testPageMember(th &TestHelper, this &Section impl PageMember) {
  // println("zork");
  testSection(th, this);
}
fn testSection(th &TestHelper, this &Section) {
  // println("zork");
  this.members.each({ testSectionMember(th, _) });
}

fn testSectionMember(th &TestHelper, virtual this &SectionMember) abstract;
fn testSectionMember(th &TestHelper, this &Header impl SectionMember) { 
  // println("zork");
}
fn testSectionMember(th &TestHelper, this &PolyList impl SectionMember) { 
  // println("zork");
}
fn testSectionMember(th &TestHelper, this &Paragraph impl SectionMember) { 
  // println("zork");
}
fn testSectionMember(th &TestHelper, this &Split impl SectionMember) {
  // println("zork");
  this.columns.each((columnSections){
  // println("gork");
    th2 = th;
    columnSections.each((s){ testSection(th2, s); });
  });
}
fn testSectionMember(th &TestHelper, this &Quote impl SectionMember) { 
  // println("gork");
}
fn testSectionMember(th &TestHelper, this &Callout impl SectionMember) { 
  // println("gork");
}
fn testSectionMember(th &TestHelper, this &CodeSnippet impl SectionMember) {
  // println("gork");
  testCode(th, this);
}

fn getCodeForLanguage(codeSnippet &CodeSnippet, language StrSlice) StrSlice {
  // println("gork");
  code! = "".slice();
  each (codeSnippet.items) (item){
    if (item.language == language) {
      mut code = slice(code + item.code);
    }
  }
  ret code;
}

fn removeNotes(s StrSlice) str {
  iter = ParseIter(s, true);
  result! = "";
  while (iter.hasNext()) {
    if (iter!.skipIfNext("«")) {
      // Parser should have replaced the name with an id, like «mynote» to «13».
      iter!.getUntilExpected("»");
    } else {
      mut result = result + iter!.getNext();
    }
  }
  ret result;
}

fn testCode(th &TestHelper, snippet &CodeSnippet) {
  // println("ork");
  if (snippet.args.len() > 0 and snippet.args.get(0) == "notest") {
    ret void();
  }

  // println("in testcode!");

  vale! = getCodeForLanguage(snippet, "vale".slice()).removeNotes();
  c = getCodeForLanguage(snippet, "c".slice()).removeNotes();
  stdin = getCodeForLanguage(snippet, "stdin".slice()).removeNotes();
  expectedStdout = getCodeForLanguage(snippet, "stdout".slice()).removeNotes();
  
  println("Program:");
  println(vale);

  if (vale == "") {
    println("Skipping snippet, contains no Vale.");
    ret void();
  } else {
    println("Testing!");
  }

  // println("bork!");

  extraArgs! = "";
  each (snippet.args) (arg){
    // println("arg: " + arg);
    if (arg.startsWith("`")) {
      mut vale = vale + "\n" + arg.slice(1, arg.len() - 1) + "\n";
    } else {
      mut extraArgs = " " + th.valestromPath + "/" + arg;
    }
  }

  // println("Running code:");
  // println(vale);

  // println("Making directory!");
  makeDirectory("/tmp/vale");
  // println("Made directory!");
  writeStringToFile("/tmp/vale/test.vale", vale);
  writeStringToFile("/tmp/vale/test.c", c);
  // println("Made files!");

  buildCommand = "python3 {th.valestromPath}/valec.py build mvtest mvtest:/tmp/vale/test.vale mvtest:/tmp/vale/test.c stdlib:{th.stdlibPath} -o /tmp/vale/test --add-exports-include-path {extraArgs}".trim().str();
  println("Running: " + buildCommand);

  // println("Building: {buildCommand}");
  buildResult = (spawn(buildCommand)).capture_and_join();
  if (buildResult.returnCode != 0) {
    println("Couldn't build! Test:");
    println(vale);
    println("Stdout:");
    println(buildResult.stdout);
    if (buildResult.stderr.len() > 0) {
      println(buildResult.stderr);
    }
    panic("Couldn't build test!");
  }

  // println("Writing stdin and stdout. stdin:");
  // println(stdin.str());
  // writeStringToFile("/tmp/vale/teststdin", stdin.str());
  // writeStringToFile("/tmp/vale/teststdout", stdout.str());

  // println("Running test code!");

  // println("Running: /tmp/vale/test");
  process = spawn("/tmp/vale/test", &snippet.args);
  if (stdin.trim().len() > 0) {
    process.handle.write_stdin(stdin);
  }
  runResult = (process).capture_and_join();
  //runResult =
  //    executeProgramV2(
  //        ExecuteProgramArgs(
  //            "/tmp/vale/test",
  //            MakeImmArray(
  //                snippet.args.len(),
  //                &!(i){ snippet.args.get(i).str() }),
  //            // MakeImmArray(
  //            //     snippet.args.len(),
  //            //     (i){ snippet.args.get(i) }),
  //            stdin));
  // println("Stdout: " + runResult.stdout);

  if (expectedStdout.trim().len() > 0) {
    if (runResult.stdout.trim() != expectedStdout.trim()) {
      println("Program did not have expected output!");
      println("Expected:");
      println(expectedStdout.trim());
      println("Actual:");
      println(runResult.stdout.trim());
      panic("Failed!");
    }
  }

  println("Success!");
}
