
func wrapTocInSeriesList(page &Page, tocRootList PolyList) PolyList {
  if (page.metadata.seriesEntries.len() > 0) {
    seriesList = PolyList("bullet", List<ListMember>());

    index = 0;
    while (index < page.metadata.seriesEntries.len() and
        (page.metadata.seriesEntries.get(index).text != "" or
            page.metadata.seriesEntries.get(index).url != "")) {
      seriesList.members.add(ListItem(page.metadata.seriesEntries.get(index).clone()));
      set index = index + 1;
    }

    vassert(page.metadata.seriesEntries.len() > 0, "wat bork");
    link = page.metadata.seriesEntries.get(index);
    set index = index + 1;
    vassert(link.text == "" and link.url == "", "wat zork");
    seriesList.members.add(ListItem(Bold(Text(slice(page.metadata.title + " *")))));
    seriesList.members.add(tocRootList);

    while (index < page.metadata.seriesEntries.len()) {
      seriesList.members.add(ListItem(page.metadata.seriesEntries.get(index).clone()));
      set index = index + 1;
    }

    return seriesList;
  } else {
    return tocRootList;
  }
}

func makeTocRootList(page &Page) PolyList {
  unSeriesdTocRootList = PolyList("bullet", List<ListMember>());

  // A stack of all the currently open lists.
  openTocLists = List<&PolyList>();
  openTocLists.add(&unSeriesdTocRootList);
  page.members.each(&{ populateTableOfContents(&openTocLists, &_); });
  drop(openTocLists);

  tocRootList = wrapTocInSeriesList(page, unSeriesdTocRootList);
  return tocRootList;
}