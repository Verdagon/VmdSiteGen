
struct PrintHelper {
  out &!Output;
  valestromPath str;
  metadata &Metadata;
  printedFirstNotes! bool;
  tableOfContents &PolyList;
  codeSnippetsPrinted! int;
  slicesPrinted! int;
  currentSlicesColor! StrSlice;
}

fn ns(ph &PrintHelper, class str) str {
  ph.metadata.namespace + " " + class
}
fn ns(ph &PrintHelper, class StrSlice) str {
  ph.metadata.namespace + " " + class
}


struct TableOfContentsBuilder {
  headers List<&Header>;
}


fn copySeriesNextLink(page &Page) Opt<Link> {
  foundThisPage! = false;
  seriesNextLink! Opt<Link> = None<Link>();
  each (page.metadata.seriesEntries) (link){
    if (link.text == "" and link.url == "") {
      mut foundThisPage = true;
    } else if (foundThisPage and seriesNextLink.isEmpty()) {
      mut seriesNextLink = Some(copy(link));
    }
  }
  ret seriesNextLink;
}


fn printPage(output &!Output, valestromPath str, page &Page, tocRootList &PolyList) {

  seriesNextLink = copySeriesNextLink(&page);

  ph = PrintHelper(output, valestromPath, &page.metadata, false, &tocRootList, 0, 0, "".slice());

  csss =
      page.metadata.cssFiles.map({
        """<link rel="stylesheet" type="text/css" href="{_}"/>"""
      }).join();

  ph.out!.println("""
<!DOCTYPE html>
<html>
<head>
<meta content="text/html;charset=utf-8" http-equiv="Content-Type">
<meta content="utf-8" http-equiv="encoding">
<style type="text/css">
body {
  font-family: 'Lato', Roboto, Verdana, Tahoma, Arial;
  font-size: 12pt;
  margin: 0;
}
</style>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
<title>{page.metadata.title}</title>
<link rel="stylesheet" type="text/css" href="/common.css"/>
<link rel="stylesheet" type="text/css" media="screen and (max-width: 624px)" href="/common-thin.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 625px) and (max-width: 928px)" href="/common-normal.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 929px)" href="/common-wide.css">

<link rel="stylesheet" type="text/css" href="/split.css"/>
<link rel="stylesheet" type="text/css" media="screen and (max-width: 624px)" href="/split-thin.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 625px) and (max-width: 928px)" href="/split-normal.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 929px)" href="/split-wide.css">

<link rel="stylesheet" type="text/css" href="/components/header.css"/>
<link rel="stylesheet" type="text/css" media="screen and (max-width: 624px)" href="/components/header-thin.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 625px) and (max-width: 928px)" href="/components/header-normal.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 929px)" href="/components/header-wide.css">

<link rel="stylesheet" type="text/css" href="/components/annotated.css"/>
<link rel="stylesheet" type="text/css" media="screen and (max-width: 624px)" href="/components/annotated-thin.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 625px) and (max-width: 928px)" href="/components/annotated-normal.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 929px)" href="/components/annotated-wide.css">

<link rel="stylesheet" type="text/css" href="/components/footer.css"/>
<link rel="stylesheet" type="text/css" href="/components/snippet.css"/>
<link rel="stylesheet" type="text/css" href="/split.css"/>

{csss}

<link href="https:\/\/fonts.googleapis.com/css?family=Lato|Roboto|Roboto+Mono" rel="stylesheet">

<link rel="stylesheet" href="\/\/cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/styles/agate.min.css">
<script src="\/\/cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/highlight.min.js"></script>
<!-- and it's easy to individually load additional languages -->
<script charset="UTF-8"
 src="https:\/\/cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/languages/go.min.js"></script>

<!-- The core Firebase JS SDK is always required and must be listed first -->
<script src="https:\/\/www.gstatic.com/firebasejs/8.2.2/firebase-app.js"></script>

<!-- TODO: Add SDKs for Firebase products that you want to use
     https:\/\/firebase.google.com/docs/web/setup#available-libraries -->
<script src="https:\/\/www.gstatic.com/firebasejs/8.2.2/firebase-analytics.js"></script>

<script>
  \/\/ Your web app's Firebase configuration
  \/\/ For Firebase JS SDK v7.20.0 and later, measurementId is optional
  var firebaseConfig = {
    apiKey: "AIzaSyByxbRMJbQRwg0Tr2JC6qyi_mEH8GMuoOs",
    authDomain: "valesite.firebaseapp.com",
    databaseURL: "https:\/\/valesite.firebaseio.com",
    projectId: "valesite",
    storageBucket: "valesite.appspot.com",
    messagingSenderId: "670338061455",
    appId: "1:670338061455:web:3a1126dfcecf9b9e83ccfa",
    measurementId: "G-BLG71TRWES"
  };
  \/\/ Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  firebase.analytics();
</script>

</head>
<body>
  {blogHeader(ph.metadata.realm == "blog")}

  <div class="{ph.ns("page {page.metadata.layout} nojs")}">
    <div class="{ph.ns("page-inner")}">
  """);

  // This is the first slice div, we occasionally printPageMember
  // will close it, add some notes, and open a new one.
  // Also print out the title and stuff in the first slice.
  ph.out!.println("""
        <div class="{ph.ns("slice {ph.currentSlicesColor}")}">
          <div class="{ph.ns("slice-contents")}">
  """);

  printHeader(&!ph);

  page.members.each({ printPageMember(&!ph, _); });

  // End the currently open slice div
  ph.out!.println("""
          </div>
        </div>
  """);
  mut ph.slicesPrinted = ph.slicesPrinted + 1;

  if (not seriesNextLink.isEmpty()) {
    ph.out!.println("""
        <div class="{ph.ns("slice {ph.currentSlicesColor}")}">
          <div class="{ph.ns("slice-contents")}">
    """);

    link = seriesNextLink.get();
    inlines = List<InlineNode>();
    inlines!.add(Bold(Text("Next: ".slice())));
    inlines!.add(Link(link.text, link.url));
    para = Paragraph(Compound(inlines));
    s = Section(List<SectionMember>());
    s.members!.add(para);
    printSection(&!ph, &s);

    ph.out!.println("""
            </div>
          </div>
    """);
  }

  ph.out!.println("""
    </div>
  </div>

  {blogFooter()} 
  <script src="/components/annotated.js"></script>
</body>
</html>
  """);
}

fn getText(inlineNode &InlineNode) str {
  textNodes = List<StrSlice>();
  collectTextNodes(&textNodes, inlineNode);
  source! = "";
  each (&textNodes) { mut source = source + _; }
  ret source;
}

fn getHeaderText(header &Header) str {
  ret getText(header.contents);
}

fn urlifyHeadingText(header &Header) str {
  source! = getHeaderText(header).trim();

  result! = "";
  while (source.len() > 0) {
    char = source.slice(0, 1);
    mut source = source.slice(1);
    if (char.toAscii() >= "0".slice().toAscii() and char.toAscii() <= "9".slice().toAscii()) {
      mut result = result + char;
    } else if (char == "-" or char.isWhitespace()) {
      mut result = result + "-";
    } else if (char.toAscii() >= "a".slice().toAscii() and char.toAscii() <= "z".slice().toAscii()) {
      mut result = result + char;
    } else if (char.toAscii() >= "A".slice().toAscii() and char.toAscii() <= "Z".slice().toAscii()) {
      mut result = result + fromAscii(char.toAscii() + ("a".slice().toAscii() - "A".slice().toAscii()));
    }
  }
  ret result;
}

fn printHeader(ph &!PrintHelper) {
  if (ph.metadata.realm != "home") {
    ph.out!.println("""
          <div class="{ph.ns("metadata")}">
            <h1 class="{ph.ns("noline cozy")}" style="margin-top: 8px">{ph.metadata.title}</h1>
    """);

    if (ph.metadata.subtitle != "") {
      ph.out!.println("""<div class="{ph.ns("subtitle content cozy")}">{ph.metadata.subtitle}</div>""");
    }
    if (ph.metadata.date != "" or ph.metadata.author != "") {
      ph.out!.println("""
              <div class="{ph.ns("content")}"><span class="{ph.ns("date")}">{ph.metadata.date}</span> <span class="{ph.ns("author")}">&nbsp;&mdash;&nbsp; {ph.metadata.author}</span></div>
      """);
    }
    ph.out!.println("""</div>""");
  }
}


fn populateTableOfContents(openTocLists &List<&PolyList>, virtual this &PageMember) abstract;
fn populateTableOfContents(openTocLists &List<&PolyList>, this &Slice impl PageMember) { }
fn populateTableOfContents(openTocLists &List<&PolyList>, this &Section impl PageMember) {
  this.members.each({ populateTableOfContents2(openTocLists, _); });
}

fn populateTableOfContents2(openTocLists &List<&PolyList>, virtual this &SectionMember) abstract;
fn populateTableOfContents2(openTocLists &List<&PolyList>, header &Header impl SectionMember) {
  while (header.level > openTocLists.len()) {
    newList = PolyList("bullet", List<ListMember>());
    newListBorrow = &newList;
    openTocLists!.get(openTocLists.len() - 1).members!.add(newList);
    openTocLists!.add(newListBorrow);
  }
  while (header.level < openTocLists.len()) {
    openTocLists!.remove(openTocLists.len() - 1);
  }

  openTocLists!.get(openTocLists.len() - 1)
      .members!.add(
          ListItem(
              Link(
                  getHeaderText(header).slice(),
                  ("#" + urlifyHeadingText(header)).slice())));
}
fn populateTableOfContents2(openTocLists &List<&PolyList>, this &PolyList impl SectionMember) { }
fn populateTableOfContents2(openTocLists &List<&PolyList>, this &Paragraph impl SectionMember) { }
fn populateTableOfContents2(openTocLists &List<&PolyList>, this &Split impl SectionMember) { }
fn populateTableOfContents2(openTocLists &List<&PolyList>, this &CodeSnippet impl SectionMember) { }
fn populateTableOfContents2(openTocLists &List<&PolyList>, this &Quote impl SectionMember) { }
fn populateTableOfContents2(openTocLists &List<&PolyList>, this &Callout impl SectionMember) { }






fn printPageMember(ph &!PrintHelper, virtual this &PageMember) abstract;
fn printPageMember(ph &!PrintHelper, this &Slice impl PageMember) {
  printSlice(this, ph);
}
fn printPageMember(ph &!PrintHelper, this &Section impl PageMember) {
  printSection(ph, this);
}
fn printSection(ph &!PrintHelper, this &Section) {
  ph.out!.println("""<section class="{ph.ns("")}">""");

  this.members.each({ printSectionMember(ph, _) });

  ph.out!.println("");
  ph.out!.println("</section>");
}

fn printSectionMember(ph &!PrintHelper, virtual this &SectionMember) abstract;
fn printSectionMember(ph &!PrintHelper, this &Header impl SectionMember) {
  ph.out!.println("""<h{this.level + 1} class="{ph.ns("")}" id="{urlifyHeadingText(this)}">""");
  printInlineNode(ph, this.contents);
  ph.out!.println("""</h{this.level + 1}>""");
}
fn printSectionMember(ph &!PrintHelper, this &PolyList impl SectionMember) {
  printList(ph, this);
}
fn printSectionMember(ph &!PrintHelper, this &Paragraph impl SectionMember) {
  ph.out!.println("""<p class="{ph.ns("")}">""");
  printInlineNode(ph, this.contents);
  ph.out!.println("");
  ph.out!.println("</p>");
}
fn printSectionMember(ph &!PrintHelper, this &Split impl SectionMember) {
  ph.out!.println("""<div class="{ph.ns("split")}">""");

  this.columns.each((columnSections){
    ph2 = ph;
    ph.out!.println("""<div class="{ph.ns("split-column")}">""");
    columnSections.each((s){ printSection(ph2, s); });
    ph.out!.println("""</div>""");
  });

  ph.out!.println("""</div>""");
}
fn printSectionMember(ph &!PrintHelper, this &Quote impl SectionMember) {
  ph.out!.println("""<div class="{ph.ns("quote")}">""");
  printInlineNode(ph, this.contents);
  ph.out!.println("");
  ph.out!.println("</div>");
}
fn printSectionMember(ph &!PrintHelper, this &Callout impl SectionMember) {
  ph.out!.println("""<div class="{ph.ns("callout")}">""");
  printInlineNode(ph, this.contents);
  ph.out!.println("");
  ph.out!.println("</div>");
}
fn printSectionMember(ph &!PrintHelper, this &CodeSnippet impl SectionMember) {
  each this.items {
    printCodeItem(ph, _);
  }
}

fn printCodeItem(ph &!PrintHelper, this &CodeItem) {
  langClass = if (this.language.len() > 0) { "language-" + this.language } else { "" };

  ph.out!.print("""
    <div class="{ph.ns("c-snippet root {langClass}")}">
      <div class="{ph.ns("c-snippet header")}">{this.language}</div>
      <div class="{ph.ns("c-snippet code")}">""");

  codeHtml =
    if (this.language == "vale") {
      writeStringToFile("/tmp/highlight{ph.codeSnippetsPrinted}.vale", this.code.str());
      valestrom! = "";
      if(has(ph.valestromPath,"Valestrom.jar")) {
        mut valestrom = ph.valestromPath;
      }else{
        mut valestrom = "{ph.valestromPath}/Valestrom.jar";
      }
      command = "java -cp {valestrom} net.verdagon.vale.driver.Driver highlight mvtest mvtest:/tmp/highlight{ph.codeSnippetsPrinted}.vale --output-dir /tmp/highlight{ph.codeSnippetsPrinted}.html";
      executeResult = (spawn(command)).capture_and_join();
      if (executeResult.returnCode != 0) {
        panic(
            "Highlighting failed:\n" + executeResult.stdout + "\n" + executeResult.stderr);
      }
      s = readFileAsString("/tmp/highlight{ph.codeSnippetsPrinted}.html").slice();
      mut ph.codeSnippetsPrinted = ph.codeSnippetsPrinted + 1;
      = s;
    } else {
      = this.code
          .replaceAll("<".slice(), "&lt;".slice())
          .replaceAll(">".slice(), "&gt;".slice());
    };
  printWithChevronNotes(ph, codeHtml);

  ph.out!.println(
   """</div>
    </div>
  """);
}

fn printWithChevronNotes(ph &!PrintHelper, s StrSlice) {
  iter = ParseIter(s, true);
  while (iter.hasNext()) {
    if (iter!.skipIfNext("«")) {
      // Parser should have replaced the name with an id, like «mynote» to «13».
      noteIdStr = iter!.getUntilExpected("»");
      noteId = noteIdStr.int().get();
      printNoteAnchor(ph, &NoteAnchor(noteId));
    } else {
      ph.out!.print(iter!.getNext());
    }
  }
}


fn printInlineNode(ph &!PrintHelper, virtual this &InlineNode) abstract;
fn printInlineNode(ph &!PrintHelper, this &Bold impl InlineNode) {
  ph.out!.print("<b>");
  printInlineNode(ph, this.inner);
  ph.out!.print("</b>");
}
fn printInlineNode(ph &!PrintHelper, this &Italic impl InlineNode) {
  ph.out!.print("<i>");
  printInlineNode(ph, this.inner);
  ph.out!.print("</i>");
}
fn printInlineNode(ph &!PrintHelper, this &Text impl InlineNode) {
  ph.out!.print(this.text);
}
fn printInlineNode(ph &!PrintHelper, this &InlineCode impl InlineNode) {
  ph.out!.print("""<span class="{ph.ns("inline-code")}">""");
  ph.out!.print(
    this.inner.replaceAll("<".slice(), "&lt;".slice())
      .replaceAll(">".slice(), "&gt;".slice()));
  ph.out!.print("</span>");
}
fn printInlineNode(ph &!PrintHelper, this &Link impl InlineNode) {
  ph.out!.print("""<a class="{ph.ns("")}" href="{this.url}">{this.text}</a>""");
}
fn printInlineNode(ph &!PrintHelper, this &NoteAnchor impl InlineNode) {
  printNoteAnchor(ph, this);
}
fn printNoteAnchor(ph &!PrintHelper, this &NoteAnchor) {
  ph.out!.print("""<a class="{ph.ns("note-anchor note-color{this.id mod 6}")}" href="#note{this.id}" data-noteId="{this.id}">{this.id}</a>""");
}
fn printInlineNode(ph &!PrintHelper, this &Compound impl InlineNode) {
  this.inners.each({ printInlineNode(ph, _) });
}




fn collectTextNodes(textNodes &List<StrSlice>, virtual this &InlineNode) abstract;
fn collectTextNodes(textNodes &List<StrSlice>, this &Text impl InlineNode) {
  textNodes!.add(this.text);
}
fn collectTextNodes(textNodes &List<StrSlice>, this &Compound impl InlineNode) {
  this.inners.each({ collectTextNodes(textNodes, _) });
}
fn collectTextNodes(textNodes &List<StrSlice>, this &Bold impl InlineNode) {
  collectTextNodes(textNodes, this.inner);
}
fn collectTextNodes(textNodes &List<StrSlice>, this &Italic impl InlineNode) {
  collectTextNodes(textNodes, this.inner);
}
fn collectTextNodes(textNodes &List<StrSlice>, this &InlineCode impl InlineNode) { }
fn collectTextNodes(textNodes &List<StrSlice>, this &Link impl InlineNode) { }
fn collectTextNodes(textNodes &List<StrSlice>, this &NoteAnchor impl InlineNode) { }




fn printList(ph &!PrintHelper, list &PolyList) {
  if (list.style == "ordered") {
    ph.out!.println("""<ol class="{ph.ns("")}">""");
  } else {
    ph.out!.println("""<ul class="{ph.ns("{list.style}")}">""");
  }

  list.members.each({ printListMember(ph, _); });

  if (list.style == "ordered") {
    ph.out!.println("</ol>");
  } else {
    ph.out!.println("</ul>");
  }
}
fn printListMember(ph &!PrintHelper, virtual this &ListMember) abstract;
fn printListMember(ph &!PrintHelper, this &PolyList impl ListMember) {
  printList(ph, this);
}
fn printListMember(ph &!PrintHelper, this &ListItem impl ListMember) {
  ph.out!.println("""<li class="{ph.ns("")}">""");
  printInlineNode(ph, this.contents);
  ph.out!.println("");
  ph.out!.println("</li>");
}



fn printSlice(this &Slice, ph &!PrintHelper) {
  // End the contents div in the current slice
  ph.out!.println("""
      </div>
  """);
  first = not ph.printedFirstNotes;
  firstClass = if (first) { "first" } else { "" };
  ph.out!.println("""<div class="{ph.ns("slice-notes {firstClass}")}">""");

  if (ph.metadata.layout == "annotated" and first) {
    ph.out!.println("""
      <nav class="{ph.ns("c-toc root")}">
      {if (ph.metadata.seriesName != "") { ph.metadata.seriesName } else { """<div class="{ph.ns("c-toc title")}">{ph.metadata.title}</div>""".slice() }}
    """);
    printList(ph, ph.tableOfContents);
    ph.out!.println("""
      </nav>
      <div class="{ph.ns("notes-first-header")}">Notes</div>
    """);
  }
  if (this.ids.len() > 0) {
    ph.out!.println("""
      <div class="{ph.ns("notes-container")}">
        <input type="checkbox" class="{ph.ns("toggle")}" id="toggle{ph.slicesPrinted}" />

        <label class="{ph.ns("notes-header")}" for="toggle{ph.slicesPrinted}">
          <span class="{ph.ns("notes-header-text when-expanded")}">Notes [&ndash;]</span>
          <span class="{ph.ns("notes-header-text when-collapsed")}">Notes [+]</span>
    """);

    this.ids.each((id){
      vassert(
          this.noteContentsById.has(id),
          id + " not in notes?");
      ph.out!.println("""<span class="{ph.ns("note-preview when-collapsed note-color{id mod 6}")}">{id}</span>""");
    });

    ph.out!.println("""
        </label>

        <div class="{ph.ns("notes-contents")}">
    """);

    this.ids.each((id){
      vassert(
          this.noteContentsById.has(id),
          id + " not in notes?");
      noteContents =
          this.noteContentsById.get(id).get();

      ph.out!.println("""<div id="note{id}" class="{ph.ns("note")}" data-noteId="{id}">""");
      ph.out!.println("""<span class="{ph.ns("note-starter note-color{id mod 6}")}">{id}</span>""");
      printSection(ph, noteContents);
      ph.out!.println("</div>");
    });

    ph.out!.println("""
        </div>
      </div>
    """);
  }

  ph.out!.println("</div>");
  mut ph.slicesPrinted = ph.slicesPrinted + 1;

  if (this.newColor != "") {
    mut ph.currentSlicesColor = this.newColor;
  }

  // End the current slice div, start a new one and start up a contents div
  ph.out!.println("""
    </div>
    <div class="{ph.ns("slice {ph.currentSlicesColor}")}">
      <div class="{ph.ns("slice-contents")}">
  """);

  mut ph.printedFirstNotes = true;
}
