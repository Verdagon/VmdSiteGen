
struct PrintHelper {
  out &Output;
  root Path;
  frontendPath str;
  metadata &Metadata;
  printedFirstNotes! bool;
  tableOfContents &PolyList;
  codeSnippetsPrinted! int;
  slicesPrinted! int;
  currentSlicesColor! StrSlice;
}

func ns(ph &PrintHelper, class str) str {
  ph.metadata.namespace + " " + class
}
func ns(ph &PrintHelper, class StrSlice) str {
  ph.metadata.namespace + " " + class
}


struct TableOfContentsBuilder {
  headers List<&Header>;
}


func copySeriesNextLink(page &Page) Opt<Link> {
  foundThisPage = false;
  seriesNextLink Opt<Link> = None<Link>();
  foreach link in page.metadata.seriesEntries {
    if (link.text == "" and link.url == "") {
      set foundThisPage = true;
    } else if (foundThisPage and seriesNextLink.isEmpty()) {
      set seriesNextLink = Some(clone(&link));
    }
  }
  return seriesNextLink;
}

/// take out
func clone<E>(list &List<E>) List<E>
where func clone(&E)E {
  return List<E>(Array<mut, E>(list.len(), &(i) => { list.get(i).clone() }));
}
/// take out
func clone(s StrSlice) StrSlice { s }


func printPage(output &Output, root &Path, frontendPath str, page &Page, tocRootList &PolyList) {

  seriesNextLink = copySeriesNextLink(&page);

  ph = PrintHelper(output, root.clone(), frontendPath, &page.metadata, false, &tocRootList, 0, 0, "".slice());

  csss =
///   page.metadata.cssFiles.map(&{
      page.metadata.cssFiles.map<StrSlice>(&{
        """<link rel="stylesheet" type="text/css" href="{_}"/>""".slice()
      })&.join();

  ph.out.println("""
<!DOCTYPE html>
<html>
<head>
<meta content="text/html;charset=utf-8" http-equiv="Content-Type">
<meta content="utf-8" http-equiv="encoding">
<style type="text/css">
body {
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;
  font-size: 12pt;
  margin: 0;
}
</style>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
<title>{page.metadata.title}</title>
<link rel="stylesheet" type="text/css" href="/common.css"/>
<link rel="stylesheet" type="text/css" media="screen and (max-width: 624px)" href="/common-thin.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 625px) and (max-width: 928px)" href="/common-normal.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 929px)" href="/common-wide.css">

<link rel="stylesheet" type="text/css" href="/split.css"/>
<link rel="stylesheet" type="text/css" media="screen and (max-width: 624px)" href="/split-thin.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 625px) and (max-width: 928px)" href="/split-normal.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 929px)" href="/split-wide.css">

<link rel="stylesheet" type="text/css" href="/components/header.css"/>
<link rel="stylesheet" type="text/css" media="screen and (max-width: 624px)" href="/components/header-thin.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 625px) and (max-width: 928px)" href="/components/header-normal.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 929px)" href="/components/header-wide.css">

<link rel="stylesheet" type="text/css" href="/components/annotated.css"/>
<link rel="stylesheet" type="text/css" media="screen and (max-width: 624px)" href="/components/annotated-thin.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 625px) and (max-width: 928px)" href="/components/annotated-normal.css">
<link rel="stylesheet" type="text/css" media="screen and (min-width: 929px)" href="/components/annotated-wide.css">

<link rel="stylesheet" type="text/css" href="/components/footer.css"/>
<link rel="stylesheet" type="text/css" href="/components/snippet.css"/>
<link rel="stylesheet" type="text/css" href="/split.css"/>

{csss}

<link href="https:\/\/fonts.googleapis.com/css?family=Lato|Roboto|Roboto+Mono" rel="stylesheet">

<link rel="stylesheet" href="https://highlightjs.org/static/demo/styles/atom-one-dark-reasonable.css">
<script src="\/\/cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>

<!-- The core Firebase JS SDK is always required and must be listed first -->
<script src="https:\/\/www.gstatic.com/firebasejs/8.2.2/firebase-app.js"></script>

<!-- TODO: Add SDKs for Firebase products that you want to use
     https:\/\/firebase.google.com/docs/web/setup#available-libraries -->
<script src="https:\/\/www.gstatic.com/firebasejs/8.2.2/firebase-analytics.js"></script>

<script>
  \/\/ Your web app's Firebase configuration
  \/\/ For Firebase JS SDK v7.20.0 and later, measurementId is optional
  var firebaseConfig = {
    apiKey: "AIzaSyByxbRMJbQRwg0Tr2JC6qyi_mEH8GMuoOs",
    authDomain: "valesite.firebaseapp.com",
    databaseURL: "https:\/\/valesite.firebaseio.com",
    projectId: "valesite",
    storageBucket: "valesite.appspot.com",
    messagingSenderId: "670338061455",
    appId: "1:670338061455:web:3a1126dfcecf9b9e83ccfa",
    measurementId: "G-BLG71TRWES"
  };
  \/\/ Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  firebase.analytics();
</script>

</head>
<body>
  """);

  printBlogHeader(&ph);

  ph.out.println("""
  <div class="{ph.ns("page {page.metadata.layout} nojs")}">
    <div class="{ph.ns("page-inner")}">
  """);

  // This is the first slice div, we occasionally printPageMember
  // will close it, add some notes, and open a new one.
  // Also print out the title and stuff in the first slice.
  ph.out.println("""
        <div class="{ph.ns("slice {ph.currentSlicesColor}")}">
          <div class="{ph.ns("slice-contents")}">
  """);

  printHeader(&ph);

  foreach x in page.members { printPageMember(&ph, &x); }

  // End the currently open slice div
  ph.out.println("""
          </div>
        </div>
  """);
  set ph.slicesPrinted = ph.slicesPrinted + 1;

  if (not seriesNextLink.isEmpty()) {
    ph.out.println("""
        <div class="{ph.ns("slice {ph.currentSlicesColor}")}">
          <div class="{ph.ns("slice-contents")}">
    """);

    link = seriesNextLink.get();
    inlines = List<InlineNode>();
    inlines.add(Bold(Text("Next: ".slice())));
    inlines.add(Link(link.text, link.url, List<StrSlice>()));
    para = Paragraph(Compound(inlines));
    s = Section(List<SectionMember>());
    s.members.add(para);
    printSection(&ph, &s);

    ph.out.println("""
            </div>
          </div>
    """);
  }

  ph.out.println("""
    </div>
  </div>

  {blogFooter(ph.metadata.realm == "blog")}
  <script src="/components/annotated.js"></script>
  <script>hljs.highlightAll();</script>
</body>
</html>
  """);
}

func getText(inlineNode &InlineNode) str {
  textNodes = List<StrSlice>();
  collectTextNodes(&textNodes, inlineNode);
  source = "";
  foreach i in textNodes { set source = source + i; }
  return source;
}

func getHeaderText(header &Header) str {
  return getText(header.contents);
}

func urlifyHeadingText(header &Header) str {
  source = getHeaderText(header).trim();

  result = "";
  while (source.len() > 0) {
    char = source.slice(0, 1);
    set source = source.slice(1);
    if (char.toAscii() >= "0".slice().toAscii() and char.toAscii() <= "9".slice().toAscii()) {
      set result = result + char;
    } else if (char == "-" or char.isWhitespace()) {
      set result = result + "-";
    } else if (char.toAscii() >= "a".slice().toAscii() and char.toAscii() <= "z".slice().toAscii()) {
      set result = result + char;
    } else if (char.toAscii() >= "A".slice().toAscii() and char.toAscii() <= "Z".slice().toAscii()) {
      set result = result + fromAscii(char.toAscii() + ("a".slice().toAscii() - "A".slice().toAscii()));
    }
  }
  return result;
}

func printHeader(ph &PrintHelper) {
  hasTitle = ph.metadata.title != "";
  hasSubtitle = ph.metadata.subtitle != "";
  hasDate = ph.metadata.date != "";
  hasAuthor = ph.metadata.author != "";
  hasSponsorLink = ph.metadata.sponsorLink;
  hasSeriesLinks = ph.metadata.seriesEntries.len() > 0;

  hasAnyDetails = hasSubtitle or hasDate or hasAuthor or hasSponsorLink;
  hasAnyMetadata = hasAnyDetails or hasTitle or hasSeriesLinks;

  if hasAnyMetadata {
    ph.out.println("""
            <div class="{ph.ns("metadata")}">
    """);

    if ph.metadata.seriesEntries.len() > 0 {
      maybePreviousLink Opt<&Link> = None<&Link>();
      maybeNextLink Opt<&Link> = None<&Link>();
      foreach [i, link] in ph.metadata.seriesEntries.entries() {
        if link.text == "" {
          if i - 1 >= 0 {
            set maybePreviousLink = Some(&ph.metadata.seriesEntries.get(i - 1));
          }
          if i + 1 < ph.metadata.seriesEntries.len() {
            set maybeNextLink = Some(&ph.metadata.seriesEntries.get(i + 1));
          }
          break;
        }
      }
      if not maybePreviousLink.isEmpty() or not maybeNextLink.isEmpty() {
        ph.out.println("""
              <div class="{ph.ns("previous-and-next")}">
        """);
        if not maybePreviousLink.isEmpty() {
          previousLink = maybePreviousLink.get();

          ph.out.println("""
                <a class="{ph.ns("previous")}" href="{previousLink.url}">{previousLink.text}</a>
          """);
        }
        if not maybeNextLink.isEmpty() {
          nextLink = maybeNextLink.get();

          ph.out.println("""
                <a class="{ph.ns("next")}" href="{nextLink.url}">{nextLink.text}</a>
          """);
        }
        ph.out.println("""
              </div>
        """);
      }
    }

    ph.out.println("""
              <h1 class="{ph.ns("noline cozy")}" style="margin-top: 8px">{ph.metadata.title}</h1>
    """);

    if hasAnyDetails {

      if hasSubtitle {
        ph.out.println("""
              <div class="{ph.ns("subtitle content cozy")}">{ph.metadata.subtitle}</div>
        """);
      }


      ph.out.println("""
              <div class="{ph.ns("content")}">
      """);

      something_in_content_line = false;
      if hasDate {
        ph.out.println("""
                <span class="{ph.ns("date")}">{ph.metadata.date}</span>
        """);
        set something_in_content_line = true;
      }

      if hasAuthor {
        if something_in_content_line {
          ph.out.println("""
                <span class="{ph.ns("separator")}">&nbsp;—&nbsp;</span>
          """);
        }
        ph.out.println("""
                <span class="{ph.ns("author")}">{ph.metadata.author}</span>
        """);
        set something_in_content_line = true;
      }

      if hasSponsorLink {
        if something_in_content_line {
          ph.out.println("""
                  <span class="{ph.ns("separator")}">&nbsp;—&nbsp;</span>
          """);
        }
        ph.out.println("""
                  <span class="{ph.ns("donate-link")}">Sponsor on <a href="https:\/\/github.com\/sponsors\/ValeLang">GitHub</a> 
                  or <a href="https:\/\/www.patreon.com\/user\/about?u=5018675">Patreon</a>!</span>
        """);
      }

      ph.out.println("""
              </div>
      """);
    }

    ph.out.println("""
            </div>
    """);
  }
}


abstract func populateTableOfContents(openTocLists &List<&PolyList>, virtual this &PageMember);
func populateTableOfContents(openTocLists &List<&PolyList>, this &Slice) { }
func populateTableOfContents(openTocLists &List<&PolyList>, this &Section) {
  foreach x in this.members { populateTableOfContents2(openTocLists, x); }
}

abstract func populateTableOfContents2(openTocLists &List<&PolyList>, virtual this &SectionMember);
func populateTableOfContents2(openTocLists &List<&PolyList>, header &Header) {
  while (header.level > openTocLists.len()) {
    newList = PolyList("bullet", List<ListMember>());
    newListBorrow = &newList;
    openTocLists.get(openTocLists.len() - 1).members.add(newList);
    openTocLists.add(newListBorrow);
  }
  while (header.level < openTocLists.len()) {
    openTocLists.remove(openTocLists.len() - 1);
  }

  openTocLists.get(openTocLists.len() - 1)
      .members.add(
          ListItem(
              Link(
                  getHeaderText(header).slice(),
                  ("#" + urlifyHeadingText(header)).slice(),
                  List<StrSlice>())));
}
func populateTableOfContents2(openTocLists &List<&PolyList>, this &PolyList) { }
func populateTableOfContents2(openTocLists &List<&PolyList>, this &Paragraph) { }
func populateTableOfContents2(openTocLists &List<&PolyList>, this &Split) { }
func populateTableOfContents2(openTocLists &List<&PolyList>, this &CodeSnippet) { }
func populateTableOfContents2(openTocLists &List<&PolyList>, this &Quote) { }
func populateTableOfContents2(openTocLists &List<&PolyList>, this &Callout) { }






abstract func printPageMember(ph &PrintHelper, virtual this &PageMember);
func printPageMember(ph &PrintHelper, this &Slice) {
  printSlice(this, ph);
}
func printPageMember(ph &PrintHelper, this &Section) {
  printSection(ph, this);
}
func printSection(ph &PrintHelper, this &Section) {
  ph.out.println("""<section class="{ph.ns("")}">""");

  foreach x in this.members { printSectionMember(ph, x); }

  ph.out.println("");
  ph.out.println("</section>");
}

abstract func printSectionMember(ph &PrintHelper, virtual this &SectionMember);
func printSectionMember(ph &PrintHelper, this &Header) {
  ph.out.println("""<h{this.level + 1} class="{ph.ns("")}" id="{urlifyHeadingText(this)}">""");
  printInlineNode(ph, this.contents);
  ph.out.println("""</h{this.level + 1}>""");
}
func printSectionMember(ph &PrintHelper, this &PolyList) {
  printList(ph, this);
}
func printSectionMember(ph &PrintHelper, this &Paragraph) {
  ph.out.println("""<p class="{ph.ns("")}">""");
  printInlineNode(ph, this.contents);
  ph.out.println("");
  ph.out.println("</p>");
}
func printSectionMember(ph &PrintHelper, this &Split) {
  alternatingClass = if this.alternating { ph.ns("split-alternating") } else { ph.ns("split-horizontal") };

  ph.out.println("""<div class="{ph.ns("split")} {alternatingClass}">""");

  first = true;
  foreach column in this.columns {
    printColumn(ph, this.alternating, column, first);
    set first = false;
  }

  ph.out.println("""</div>""");
}
func printSectionMember(ph &PrintHelper, this &Quote) {
  ph.out.println("""<div class="{ph.ns("quote")}">""");
  printInlineNode(ph, this.contents);
  ph.out.println("");
  ph.out.println("</div>");
}
func printSectionMember(ph &PrintHelper, this &Callout) {
  ph.out.println("""<div class="{ph.ns("callout")}">""");
  printInlineNode(ph, this.contents);
  ph.out.println("");
  ph.out.println("</div>");
}
func printSectionMember(ph &PrintHelper, this &CodeSnippet) {
  foreach i in this.items {
    printCodeItem(ph, i);
  }
}

func printColumn(ph &PrintHelper, alternating bool, this &Column, first bool) {
  alternatingClass = if alternating { ph.ns("split-alternating") } else { ph.ns("split-horizontal") };
  directionClass = if this.rightward { ph.ns("split-rightward") } else { ph.ns("split-leftward") };
  firstClass = if first { ph.ns("split-first") } else { "" };

  ph.out.println("""<div class="{ph.ns("split-column")} {alternatingClass} {directionClass} {firstClass}">""");
  foreach s in this.sections { printSection(ph, s); }
  ph.out.println("""</div>""");
}

func printCodeItem(ph &PrintHelper, this &CodeItem) {
  langClass = if (this.language.len() > 0) { "language-" + this.language } else { "" };

  ph.out.print("""
    <div class="{ph.ns("c-snippet root")}">
      <div class="{ph.ns("c-snippet header")}">{this.language}</div>
      <pre class="{ph.ns("c-snippet pre")}"><code class="{ph.ns("c-snippet code")} {langClass}">""");

  codeHtml =
    if (this.language == "vale") {
      writeStringToFile("/tmp/highlight{ph.codeSnippetsPrinted}.vale", this.code.str());
      frontend = "";
      if (contains(ph.frontendPath, "Frontend.jar")) {
        set frontend = ph.frontendPath;
      } else {
        set frontend = "{ph.frontendPath}/Frontend.jar";
      }
      command = "java -cp {frontend} dev.vale.passmanager.PassManager highlight mvtest=/tmp/highlight{ph.codeSnippetsPrinted}.vale --output_dir /tmp/highlight{ph.codeSnippetsPrinted}.html";
      executeResult = ((Subprocess(command)).expect("bugger")).capture_and_join();
      if (executeResult.return_code != 0) {
        panic(
            "Highlighting command failed: {command}\n" + executeResult.stdout + "\n" + executeResult.stderr);
      }
      s = readFileAsString("/tmp/highlight{ph.codeSnippetsPrinted}.html");
      set ph.codeSnippetsPrinted = ph.codeSnippetsPrinted + 1;
      s
    } else {
      this.code
          .replaceAll("<".slice(), "&lt;".slice())
          .replaceAll(">".slice(), "&gt;".slice())
    };
  printWithChevronNotes(ph, codeHtml.slice());

  ph.out.println(
   """</code></pre>
    </div>
  """);
}

func printWithChevronNotes(ph &PrintHelper, s StrSlice) {
  iter = ParseIter(s);
  while (iter.hasNext()) {
    if (iter.skipIfNext("«")) {
      // Parser should have replaced the name with an id, like «mynote» to «13».
      noteIdStr = iter.getUntilExpected("»");
      noteId = noteIdStr.int().get();
      printNoteAnchor(ph, &NoteAnchor(noteId));
    } else {
      ph.out.print(iter.getNext());
    }
  }
}


abstract func printInlineNode(ph &PrintHelper, virtual this &InlineNode);
func printInlineNode(ph &PrintHelper, this &Bold) {
  ph.out.print("<b>");
  printInlineNode(ph, this.inner);
  ph.out.print("</b>");
}
func printInlineNode(ph &PrintHelper, this &Italic) {
  ph.out.print("<i>");
  printInlineNode(ph, this.inner);
  ph.out.print("</i>");
}
func printInlineNode(ph &PrintHelper, this &Text) {
  ph.out.print(this.text);
}
func printInlineNode(ph &PrintHelper, this &InlineCode) {
  ph.out.print("""<span class="{ph.ns("inline-code")}">""");
  ph.out.print(
    this.inner.replaceAll("<".slice(), "&lt;".slice())
      .replaceAll(">".slice(), "&gt;".slice()));
  ph.out.print("</span>");
}
func printInlineNode(ph &PrintHelper, this &Link) {
  ph.out.print("""<a class="{ph.ns("")} {this.classes.join(" ")}" href="{this.url}">{this.text}</a>""");
}
func printInlineNode(ph &PrintHelper, this &NoteAnchor) {
  printNoteAnchor(ph, this);
}
func printNoteAnchor(ph &PrintHelper, this &NoteAnchor) {
  ph.out.print("""<a class="{ph.ns("note-anchor note-color{this.id mod 6}")}" href="#note{this.id}" data-noteId="{this.id}">{this.id}</a>""");
}
func printInlineNode(ph &PrintHelper, this &Compound) {
  foreach x in this.inners { printInlineNode(ph, x); }
}




abstract func collectTextNodes(textNodes &List<StrSlice>, virtual this &InlineNode);
func collectTextNodes(textNodes &List<StrSlice>, this &Text) {
  textNodes.add(this.text);
}
func collectTextNodes(textNodes &List<StrSlice>, this &Compound) {
  foreach x in this.inners { collectTextNodes(textNodes, x); }
}
func collectTextNodes(textNodes &List<StrSlice>, this &Bold) {
  collectTextNodes(textNodes, this.inner);
}
func collectTextNodes(textNodes &List<StrSlice>, this &Italic) {
  collectTextNodes(textNodes, this.inner);
}
func collectTextNodes(textNodes &List<StrSlice>, this &InlineCode) { }
func collectTextNodes(textNodes &List<StrSlice>, this &Link) { }
func collectTextNodes(textNodes &List<StrSlice>, this &NoteAnchor) { }



func printList(ph &PrintHelper, list &PolyList) {
  if (list.style == "ordered") {
    ph.out.println("""<ol class="{ph.ns("")}">""");
  } else {
    ph.out.println("""<ul class="{ph.ns("{list.style}")}">""");
  }

  foreach x in list.members { printListMember(ph, x); }

  if (list.style == "ordered") {
    ph.out.println("</ol>");
  } else {
    ph.out.println("</ul>");
  }
}
abstract func printListMember(ph &PrintHelper, virtual this &ListMember);
func printListMember(ph &PrintHelper, this &PolyList) {
  printList(ph, this);
}
func printListMember(ph &PrintHelper, this &ListItem) {
  ph.out.println("""<li class="{ph.ns("")}">""");
  printInlineNode(ph, this.contents);
  ph.out.println("");
  ph.out.println("</li>");
}



func printSlice(this &Slice, ph &PrintHelper) {
  // End the contents div in the current slice
  ph.out.println("""
      </div>
  """);
  first = not ph.printedFirstNotes;
  firstClass = if (first) { "first" } else { "" };
  ph.out.println("""<div class="{ph.ns("slice-notes {firstClass}")}">""");

  if (ph.metadata.layout == "annotated" and first) {
    ph.out.println("""
      <nav class="{ph.ns("c-toc root")}">
      {if (ph.metadata.seriesName != "") { ph.metadata.seriesName } else { """<div class="{ph.ns("c-toc title")}">{ph.metadata.title}</div>""".slice() }}
    """);
    printList(ph, ph.tableOfContents);
    ph.out.println("""
      </nav>
      <div class="{ph.ns("notes-first-header")}">
        <div><b>Side Notes</b></div>
        <div>(interesting tangential thoughts)</div>
      </div>
    """);
  }
  if (this.ids.len() > 0) {
    ph.out.println("""
      <div class="{ph.ns("notes-container")}">
        <input type="checkbox" class="{ph.ns("toggle")}" id="toggle{ph.slicesPrinted}" />

        <label class="{ph.ns("notes-header")}" for="toggle{ph.slicesPrinted}">
          <span class="{ph.ns("notes-header-text when-expanded")}">Notes [&ndash;]</span>
          <span class="{ph.ns("notes-header-text when-collapsed")}">Notes [+]</span>
    """);

    foreach id in this.ids {
      vassert(
          this.noteContentsById.ContainsKey(id),
          id + " not in notes?");
      ph.out.println("""<span class="{ph.ns("note-preview when-collapsed note-color{id mod 6}")}">{id}</span>""");
    }

    ph.out.println("""
        </label>

        <div class="{ph.ns("notes-contents")}">
    """);

    foreach id in this.ids {
      vassert(
          this.noteContentsById.ContainsKey(id),
          id + " not in notes?");
      noteContents =
          &this.noteContentsById.get(id).get();

      ph.out.println("""<div id="note{id}" class="{ph.ns("note")}" data-noteId="{id}">""");
      ph.out.println("""<span class="{ph.ns("note-starter note-color{id mod 6}")}">{id}</span>""");
      printSection(ph, noteContents);
      ph.out.println("</div>");
    }

    ph.out.println("""
        </div>
      </div>
    """);
  }

  ph.out.println("</div>");
  set ph.slicesPrinted = ph.slicesPrinted + 1;

  if (this.newColor != "") {
    set ph.currentSlicesColor = this.newColor;
  }

  // End the current slice div, start a new one and start up a contents div
  ph.out.println("""
    </div>
    <div class="{ph.ns("slice {ph.currentSlicesColor}")}">
      <div class="{ph.ns("slice-contents")}">
  """);

  set ph.printedFirstNotes = true;
}
